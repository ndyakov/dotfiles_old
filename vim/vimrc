" ========== Load Pathogen ================="
filetype off

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
" ========== END Load Pathogen =============="

" ========== Vim Basic Settings ============="
" Make vim incompatbile to vi.
set nocompatible
set modelines=0

" Global TAB settings.
set smartindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Show whitespaces
set list
set listchars=tab:▸\ ,eol:¬,trail:⬦,nbsp:⬦

" Highlight searches
set hlsearch

" Use smartcase
set smartcase

" Search while typing
set incsearch

" Set backup dir for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" More Common Settings.
set encoding=utf-8
set scrolloff=5
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set novisualbell
set timeout ttimeoutlen=50

set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start

" Set number
set number
set norelativenumber

" Set undofile
set shell=/bin/bash
set lazyredraw
set matchtime=3

" Set title to window
set title

" Let lines be around 80 chars long
"set textwidth=80

" Change status color on different modes
" First, enable status line always
set laststatus=2

" Now set it up to change the status line based on mode
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermfg=7 ctermbg=23 guibg=#005f5f guifg=White gui=underline
  au InsertLeave * hi StatusLine term=reverse ctermfg=7 ctermbg=8 gui=bold,reverse
endif

" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Highlight trailing whitespaces
match Error /\s\+$/

" Working with split screen nicely
" Resize Split When the window is resized"
au VimResized * :wincmd =

" =========== END Basic Vim Settings ===========

" =========== Vim Keybindings ==================

" Changing Leader Key
let mapleader = ","

" C-q doesn't reach vim, so lets try this:
silent !stty -ixon > /dev/null 2>/dev/null

" Let Alt key combos to work :
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

" Make tab in v mode ident code
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" Ctrl+Space autocomplete
inoremap <C-Space> <C-p>
inoremap <C-@> <C-p>

" Ctrl+S to save
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>
vnoremap <C-s> <ESC>:w<CR>

" <leader><leader> to toggle between buffers
nmap <leader><leader> <C-^>
vmap <leader><leader> <C-^>

" Navigation between windows
nnoremap <silent> <A-k> :wincmd k<CR>
nnoremap <silent> <A-j> :wincmd j<CR>
nnoremap <silent> <A-h> :wincmd h<CR>
nnoremap <silent> <A-l> :wincmd l<CR>
nnoremap <silent> <A-q> :close<CR>

" Navigation between buffers
nnoremap <silent> <C-l> :bnext<CR>
nnoremap <silent> <C-h> :bprevious<CR>
nnoremap <silent> <C-q> :MBEbd<CR>

" Get Rid of stupid Goddamned help keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Toggle highlight search
let hlstate=0
nnoremap <Leader>n :if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=hlstate+1<CR>:echo "toggled visibility for hlsearch"<CR>
inoremap <Leader>n <ESC>:if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=hlstate+1<CR>:echo "toggled visibility for hlsearch"<CR>a

" Better navigation between results with vimgrep and similar
" plugins
nnoremap [q :cprev<CR>
nnoremap ]q :cnext<CR>

" Better navigation between results with f<char>
nnoremap [a ,
nnoremap ]a ;

vnoremap [a ,
vnoremap ]a ;

" Better navigation in jumplist

nnoremap [w <C-o>
nnoremap ]w <C-i>

vnoremap [w <C-o>
vnoremap ]w <C-i>

" Map : to ; also in command mode.
nnoremap ; :

" Set vim to save the file on focus out.
" au FocusLost * :wa

" Adding More Shorcuts keys using leader key.
" Leader Key provide separate namespace for specific commands.
",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" let left and right keys go to the next line
set whichwrap+=<,>,h,l

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" ,;  For Qicker Escaping between normal and visual mode.
vnoremap <leader>; <ESC>

nnoremap g; g;zz

" =========== END Vim Keybindings ==============

" =========== Color theme settings =============

colo lucius
LuciusDark
hi Normal ctermbg=NONE

" =========== END Color theme settings =========

" =========== Gvim Settings =============

" Removing scrollbars
if has("gui_running")
    set guifont=Liberation\ Mono\ 12
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions+=i
    set guioptions-=m
else
    set t_Co=256
endif

" Source the vimrc file after saving it
autocmd bufwritepost .vimrc source ~/.vimrc

" ========== END Gvim Settings ==========

" ========== Functions ==================

func! ClearTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" ========== END Functions ==============

" ========== Plugins Settings =========="
" vim mode-switch lag fix (related to autoclose)
if ! has("gui_running")
    set ttimeoutlen=10

    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" Mapping for ag
" Search the word under the cursor
nnoremap <leader>f mM:Ag! "<C-R><C-W>"<CR>:cw<CR>
vnoremap <leader>f mM"hy:Ag! <C-R>h<CR>:cw<CR>
" Mapping to Undotree
nmap <leader>u <ESC>:UndotreeToggle<CR>
imap <leader>u <ESC>:UndotreeToggle<CR>

" Mapping to NERDTree
nnoremap <C-n> :NERDTreeToggle<cr>
let NERDTreeIgnore=['.sw?','\~$', '\.pyc$']

" Tagbar key bindings."
nmap <leader>l <ESC>:TagbarToggle<CR>
imap <leader>l <ESC>:TagbarToggle<CR>i

" Tagbar support for go."
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" CtrlP key binding.
nnoremap <C-o> :CtrlP<CR>
inoremap <C-o> <ESC>:CtrlP<CR>
vnoremap <C-o> <ESC>:CtrlP<CR>

" Symbol for lines which have been added, default: +
let g:git_diff_added_symbol='⇒'

" Symbol for lines which have been removed, default: -
let g:git_diff_removed_symbol='⇐'

" Symbol for lines which have been changed, default: <>
let g:git_diff_changed_symbol='⇔'

" =========== END Plugin Settings =========="
